import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  Form,
  Row,
  Col,
  Pagination,
  Modal,
  Spinner,
  OverlayTrigger,
  Tooltip,
  Badge,
} from "react-bootstrap";
import { Link } from "react-router-dom";
import { MdDelete, MdOutlineAutoFixHigh } from "react-icons/md";
import {
  filterOrders,
  deleteOrderById,
  updateOrderStatus,
} from "../api/orderApi";
import * as XLSX from "xlsx";
import { FiEye } from "react-icons/fi";
import { useAuth } from "../contexts/AuthContext";

const OrderList = () => {
  const { user } = useAuth();

  const [orders, setOrders] = useState([]);
  const [filters, setFilters] = useState({
    page: 1,
    limit: 8,
    keyword: "",
    status: "",
  });
  const [pagination, setPagination] = useState({
    totalPages: 1,
    totalOrders: 0,
    currentPage: 1,
  });
  const [loading, setLoading] = useState(false);
  const [orderToDelete, setOrderToDelete] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [message, setMessage] = useState("");

  const fetchOrders = async () => {
    setLoading(true);
    try {
      const data = await filterOrders(filters);
      setOrders(data.orders);
      setPagination({
        totalPages: data.totalPages,
        totalOrders: data.totalOrders,
        currentPage: data.currentPage,
      });
    } catch (err) {
      console.error("L·ªói khi t·∫£i ƒë∆°n h√†ng:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, [filters]);

  const handlePageChange = (page) => {
    setFilters((prev) => ({ ...prev, page }));
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({
      ...prev,
      [name]: value,
      page: 1,
    }));
  };

  const openDeleteModal = (orderId) => {
    setOrderToDelete(orderId);
    setShowModal(true);
  };

  const closeDeleteModal = () => {
    setShowModal(false);
    setOrderToDelete(null);
  };

  const handleDelete = async () => {
    try {
      await deleteOrderById(orderToDelete);
      setMessage("üóëÔ∏è ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a.");
      fetchOrders();
    } catch {
      alert("‚ùå X√≥a ƒë∆°n h√†ng th·∫•t b·∫°i.");
    } finally {
      closeDeleteModal();
    }
  };

  const handleStatusChange = async (orderId, newStatus) => {
    try {
      await updateOrderStatus(orderId, newStatus);
      setMessage("‚úÖ Tr·∫°ng th√°i ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
      fetchOrders();
    } catch (err) {
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i.");
    }
  };

  const handleExportToExcel = () => {
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.json_to_sheet(
      orders.map((order) => ({
        "M√£ ƒêH": `DH${order.order_id.toString().padStart(4, "0")}`,
        "Kh√°ch h√†ng": order.customer_name,
        SƒêT: order.customer_phone,
        Email: order.customer_email,
        "ƒê·ªãa ch·ªâ": order.address,
        "Ng√†y t·∫°o": new Date(order.created_at).toLocaleDateString(),
        "T·ªïng ti·ªÅn": `${Number(order.final_total).toLocaleString()} VND`,
        "Tr·∫°ng th√°i": order.status,
      }))
    );
    XLSX.utils.book_append_sheet(wb, ws, "ƒê∆°n h√†ng");
    XLSX.writeFile(wb, "don_hang.xlsx");
  };

  const renderStatusBadge = (status) => {
    let variant = "secondary";
    switch (status) {
      case "Ch·ªù x·ª≠ l√Ω":
        variant = "warning";
        break;
      case "ƒêang giao":
        variant = "info";
        break;
      case "ƒê√£ giao":
        variant = "success";
        break;
      case "ƒê√£ h·ªßy":
        variant = "danger";
        break;
    }
    return <Badge bg={variant}>{status}</Badge>;
  };

  return (
    <div className="container-fluid my-4" style={{ paddingLeft: "35px" }}>
      <Row className="align-items-center mb-3">
        <Col>
          <h4>üì¶ Danh s√°ch ƒë∆°n h√†ng</h4>
          {message && <div className="alert alert-success mt-2">{message}</div>}
        </Col>
      </Row>

      <Row className="mb-3">
        <Col md={4}>
          <Form.Control
            type="text"
            placeholder="üîç T√¨m t√™n / email / SƒêT"
            name="keyword"
            value={filters.keyword}
            onChange={handleFilterChange}
          />
        </Col>
        <Col md={3}>
          <Form.Select
            name="status"
            value={filters.status}
            onChange={handleFilterChange}
          >
            <option value="">-- T·∫•t c·∫£ tr·∫°ng th√°i --</option>
            <option value="Ch·ªù x·ª≠ l√Ω">Ch·ªù x·ª≠ l√Ω</option>
            <option value="ƒêang giao">ƒêang giao</option>
            <option value="ƒê√£ giao">ƒê√£ giao</option>
            <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
          </Form.Select>
        </Col>
        <Col className="text-end">
          <Button variant="success" onClick={handleExportToExcel}>
            üìÑ Xu·∫•t Excel
          </Button>
        </Col>
      </Row>

      <div className="d-flex flex-column flex-md-row justify-content-between align-items-center mb-3 px-2">
        <div className="mb-2 mb-md-0">
          <small className="text-muted fw-medium">
            T·ªïng c·ªông <strong>{pagination.totalOrders}</strong> ƒë∆°n h√†ng
          </small>
        </div>

        <Pagination className="m-0">
          <Pagination.First
            onClick={() => handlePageChange(1)}
            disabled={pagination.currentPage === 1}
          />
          <Pagination.Prev
            onClick={() => handlePageChange(pagination.currentPage - 1)}
            disabled={pagination.currentPage === 1}
          />

          {Array.from({ length: pagination.totalPages }, (_, idx) => {
            const page = idx + 1;
            return (
              <Pagination.Item
                key={page}
                active={page === pagination.currentPage}
                onClick={() => handlePageChange(page)}
                className="fw-bold"
              >
                {page}
              </Pagination.Item>
            );
          })}

          <Pagination.Next
            onClick={() => handlePageChange(pagination.currentPage + 1)}
            disabled={pagination.currentPage === pagination.totalPages}
          />
          <Pagination.Last
            onClick={() => handlePageChange(pagination.totalPages)}
            disabled={pagination.currentPage === pagination.totalPages}
          />
        </Pagination>
      </div>
      <div className="table-responsive">
        <Table
          responsive
          bordered
          hover
          className="align-middle text-center table-striped shadow-sm"
        >
          <thead className="table-light">
            <tr>
              <th>M√£ ƒêH</th>
              <th>Kh√°ch h√†ng</th>
              <th>SƒêT</th>
              <th>Email</th>
              <th>ƒê·ªãa ch·ªâ</th>
              <th>Ng√†y t·∫°o</th>
              <th>T·ªïng ti·ªÅn</th>
              <th>H√¨nh th·ª©c</th>
              <th>Tr·∫°ng th√°i</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody className="table-group-divider">
            {loading ? (
              <tr>
                <td colSpan="9" className="text-center py-4">
                  <Spinner animation="border" variant="primary" />
                </td>
              </tr>
            ) : orders.length === 0 ? (
              <tr>
                <td colSpan="9" className="text-center">
                  Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.
                </td>
              </tr>
            ) : (
              orders.map((order) => (
                <tr key={order.order_id}>
                  <td>DH{order.order_id.toString().padStart(4, "0")}</td>
                  <td>{order.customer_name}</td>
                  <td>{order.customer_phone}</td>
                  <td>{order.customer_email}</td>

                  <td>
                    {order.address.length > 15
                      ? order.address.slice(0, 15) + "..."
                      : order.address}
                  </td>
                  <td>{new Date(order.created_at).toLocaleDateString()}</td>
                  <td>{Number(order.final_total).toLocaleString()} VND</td>
                  <td>{order.payment_method}</td>
                  <td>
                    <Form.Select
                      value={order.status || ""}
                      onChange={(e) =>
                        handleStatusChange(order.order_id, e.target.value)
                      }
                    >
                      <option value="Ch·ªù x·ª≠ l√Ω">Ch·ªù x·ª≠ l√Ω</option>
                      <option value="ƒêang giao">ƒêang giao</option>
                      <option value="ƒê√£ giao">ƒê√£ giao</option>
                      <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
                    </Form.Select>
                  </td>
                  <td className="d-flex gap-2">
                    <OverlayTrigger overlay={<Tooltip>Xem chi ti·∫øt</Tooltip>}>
                      <Button
                        variant="outline-primary"
                        size="sm"
                        as={Link}
                        to={`/don-hang/chi-tiet/${order.order_id}`}
                      >
                        <FiEye />
                      </Button>
                    </OverlayTrigger>
                    {user?.role === "admin" && (
                      <OverlayTrigger overlay={<Tooltip>X√≥a ƒë∆°n</Tooltip>}>
                        <Button
                          variant="outline-danger"
                          size="sm"
                          onClick={() => openDeleteModal(order.order_id)}
                        >
                          <MdDelete />
                        </Button>
                      </OverlayTrigger>
                    )}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </Table>
      </div>

      <Modal show={showModal} onHide={closeDeleteModal}>
        <Modal.Header closeButton>
          <Modal.Title>X√°c nh·∫≠n x√≥a ƒë∆°n h√†ng</Modal.Title>
        </Modal.Header>
        <Modal.Body>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë∆°n h√†ng n√†y kh√¥ng?</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={closeDeleteModal}>
            H·ªßy
          </Button>
          <Button variant="danger" onClick={handleDelete}>
            X√≥a
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default OrderList;
